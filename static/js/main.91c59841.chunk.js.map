{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","actions.js","components/Scroll.js","components/Header.js","components/SomeButton.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","connect","dispatch","onSearchChange","event","text","target","value","type","payload","props","placeholder","onChange","Scroll","style","overflow","border","height","children","Header","React","memo","SomeButton","count","App","searchField","useSelector","state","searchRobots","useState","setCount","requestRobots","isPending","error","useDispatch","useEffect","fetch","then","response","json","data","catch","filteredRobots","filter","robot","toLowerCase","includes","color","handleClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.91c59841.chunk.js","sourcesContent":["export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQEUST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQEUST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQEUST_ROBOTS_FAILED\";\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"Card List component\");\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField } from \"../actions\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  };\r\n};\r\n\r\nconst SearchBox = (props) => {\r\n  console.log(\"Searchbox component\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={props.onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBox);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n  return { type: CHANGE_SEARCHFIELD, payload: text };\r\n};\r\n\r\nexport const requestRobots = () => {\r\n  return function (dispatch) {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch((error) =>\r\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n      );\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  console.log(\"Header Component\");\r\n  return (\r\n    <>\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import { memo } from \"react\";\r\n\r\nconst SomeButton = (props) => {\r\n  console.log(\"Some Button\");\r\n\r\n  return (\r\n    <div>\r\n      <button>Count: {props.count}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(SomeButton);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { requestRobots } from \"../actions\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport \"./App.css\";\r\nimport SomeButton from \"../components/SomeButton\";\r\n\r\nfunction App() {\r\n  const searchField = useSelector((state) => state.searchRobots.searchField);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const handleClick = () => {\r\n    setCount((count) => count + 1);\r\n  };\r\n\r\n  const { robots, isPending, error } = useSelector(\r\n    (state) => state.requestRobots\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestRobots());\r\n  }, []);\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  return isPending ? (\r\n    <h1>Loading {error}</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SomeButton color={\"red\"} handleClick={handleClick} count={count} />\r\n      <SearchBox />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nconst intialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: null,\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider, connect } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport \"tachyons\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}